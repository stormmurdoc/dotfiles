set previewer '~/.config/lf/scope'
set autoquit true
set hidden true
# cmds/functions

cmd open ${{
  case $(file --mime-type $f -b) in
    image/vnd.djvu|application/pdf|application/octet-stream) setsid -f mupdf $fx >/dev/null 2>&1 ;;
    text/*) $EDITOR $fx;;
  	text/* | */xml | application/json) $EDITOR $fx;;
  	text/* | */xml | application/json | application/x-ndjson) $EDITOR $fx;;
    image/x-xcf|image/svg+xml) setsid -f gimp $f >/dev/null 2>&1 ;;
    image/*) nsxiv $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
    audio/*) mpv --audio-display=no $f ;;
    video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
    application/pdf|application/vnd*|application/epub*) setsid -f mupdf $fx >/dev/null 2>&1 ;;
    *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
  esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack $fx
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

# Fuzzy finder
cmd fzf_locate ${{
    out=$(locate workspaces | fzf -e -i)
    if [ -f "$out" ];then
        # File
        file="$(basename "$out")"
        out="$(dirname "$out")"
        lf -remote "send cd '$out'"
        lf -remote "send select '$file'"
    else
        # Directory
        lf -remote "send cd \"$out\""
    fi
}}
cmd setbg "$1"
cmd bulkrename $vidir

## Bindings

map GG top
map gb cd ~/Bilder/
map gd cd ~/Downloads//
map gh cd ~
map gi cd /data/trinity/transfer/in
map gl cd ~/.local/bin/
map gm $lf -remote "send $id cd \"$XDG_MUSIC_DIR\""
map go cd ~/ownCloud/
map gs cd ~/tmp/ScanInbox/
map gv cd ~/Videos/Filme/
map gw cd ~/workspace/
map DD delete
map e !easytag ./
map E extract
map C !~/.local/bin/pdf2jpg $f
map R !convert -rotate -90 "$f" "$f"
map M moveto
map <bs> set hidden!
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-l> fzf_locate
map <c-f> $lf -remote "send $id select '$(fzf)'"
map <c-x> !nvim -u /home/murdoc/.config/nvim/init.vim ~/.config/lf/lfrc

# mpd mappings
map tf mpd_add f
map td mpd_add d

# Archive Mappings
map xz zip
map xt tar
map xg targz
map xb targz
map xu unarchive

#map <enter> shell
map x cut
map X !~/.local/bin/ext "$f"
map o &open "$f"
map O $open --ask "$f"
map <enter> open

#
map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extention
map a push A<a-b> # after extention
map B bulkrename
map b $setbg $f

#
map <c-e> down
map <c-y> up
map V !nvim $f
